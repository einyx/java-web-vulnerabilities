package de.marko.pentest.rest.handler;

import de.marko.pentest.db.DatabaseJPAConnector;
import de.marko.pentest.db.entity.User;
import de.marko.pentest.db.entity.UserMetaData;
import io.vertx.core.Handler;
import io.vertx.ext.web.Cookie;
import io.vertx.ext.web.RoutingContext;
import java.util.Set;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author marko
 * @version 1.0.0.
 * @date 05.01.2018
 */
public class GetTokenHandlerV2 implements Handler<RoutingContext> {

	private final static Logger LOGGER = LoggerFactory.getLogger(GetTokenHandlerV2.class);

	@Override
	public void handle(RoutingContext routingContext) {

		String agent = routingContext.request().getHeader("User-Agent");

		Set<Cookie> cookies = routingContext.cookies();

		Cookie cookie = cookies.stream()
			.filter(p -> p.getName().equals("Authentication"))
			.findFirst()
			.orElse(null);

		if(cookie == null) {
			routingContext.response().setStatusCode(500).end("No creds passed.");
		}

		String[] authData = cookie.getValue().split(":");

		if(authData.length != 2) {
			routingContext.response().setStatusCode(500).end("No creds passed.");
		}

		String userQuery = "SELECT u.id, u.name, u.password, u.token, u.version"
			+ " FROM Users u"
			+ " WHERE name = '" + authData[0]
			+ "' AND password = '" + authData[1] + "'";

		User user = DatabaseJPAConnector.connect()
			.nativeSelectQuery(userQuery, User.class)
			.stream()
			.findFirst()
			.orElse(null);

		if (user == null) {
			routingContext.response().setStatusCode(404).end("No user found.");
		}

		// Check user agent
		String metadataQuery = new StringBuilder("SELECT md.id, md.userid, md.useragent, md.ip, md.version")
			.append(" FROM metadata md")
			.append(" WHERE userid = '").append(user.getUserId()).append("' ")
			.append(" AND")
			.append(" useragent = '").append(agent)
			.append("'").toString();

		UserMetaData metaData = DatabaseJPAConnector.connect()
			.nativeSelectQuery(metadataQuery, UserMetaData.class)
			.stream()
			.findFirst()
			.orElse(null);

		if(metaData == null) {
			routingContext.response().setStatusCode(403).end("Error.");
		}

		if(routingContext.request().remoteAddress().host().equals(metaData.getIp())) {
			LOGGER.info("Security LOG: User ip changed.");
		}

		routingContext.response().setStatusCode(200).end(user.getToken());
	}

}
