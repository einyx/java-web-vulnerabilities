package de.marko.pentest.rest.handler;

import de.marko.pentest.db.DatabaseJPAConnector;
import de.marko.pentest.db.entity.User;
import io.vertx.core.Handler;
import io.vertx.ext.web.RoutingContext;
import java.util.HashMap;
import java.util.Map;

/**
 * @author marko
 * @version 1.0.0.
 * @date 05.01.2018
 */
public class GetTokenHandlerV3 implements Handler<RoutingContext> {

	private final String protectionString = "%2F1337+";

	@Override
	public void handle(RoutingContext routingContext) {

		Map<String, String> params = parseBody(routingContext.getBodyAsString());

		String name = params.get("name");

		String password = params.get("password");

		String mapPrev = params.get("noobprotection");

		if(mapPrev == null) {
			routingContext.response().setStatusCode(500).end("noob");
		}

		if(!mapPrev.equals(this.protectionString)) {
			routingContext.response().setStatusCode(500).end("noob");
		}

		String query = "SELECT u.id, u.name, u.password, u.token, u.version"
			+ " FROM Users u"
			+ " WHERE name = '" + name
			+ "' AND password = '" + password + "'";

		User user = DatabaseJPAConnector.connect()
			.nativeSelectQuery(query, User.class)
			.stream()
			.findFirst()
			.orElse(null);

		if (user != null) {
			routingContext.response().setStatusCode(200).end(user.getToken());
		} else {
			routingContext.response().setStatusCode(500).end("");
		}
	}

	private Map<String, String> parseBody(String buffer) {
		Map<String, String> params = new HashMap<String, String>();
		String[] paramSplits = buffer.toString().split("&");
		String[] valueSplits;

		if (paramSplits.length > 1)
		{
			for (String param : paramSplits)
			{
				valueSplits = param.split("=");
				if (valueSplits.length > 1)
				{
					params.put(valueSplits[0], valueSplits[1]);
				}
			}
		}
		return params;
	}

}
