package de.marko.pentest.db;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Map;
import java.util.Properties;
import org.apache.commons.dbcp2.BasicDataSource;
import org.hibernate.cfg.AvailableSettings;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author marko
 * @version 1.0.0.
 * @date 05.01.2018
 */
public class VulnDB {

	final static Logger logger = LoggerFactory.getLogger(VulnDB.class);

	public static void initialize(String database) {
		DatabaseJPAConnector.connect(database);
	}

	public static void initialize(String database, String propertyFile) throws IOException {
		ClassLoader classLoader = ClassLoader.getSystemClassLoader();

		File file = null;
		try {
			file = new File(classLoader.getResource(propertyFile).getFile());
		} catch (NullPointerException e) {
			logger.warn("Could not found db props in jar.");
		}

		if (file == null || !file.isFile()) {
			file = new File(propertyFile);
			if (!file.isFile()) {
				logger.error("Cannot connect to database. Missing database properties.");
				return;
			}
		}

		Properties dbProps = new Properties();

		BasicDataSource dbcpDataSource;

		dbProps.load(Files.newInputStream(file.toPath()));

		dbcpDataSource = new BasicDataSource();
		dbcpDataSource.setUrl(dbProps.getProperty(AvailableSettings.URL));
		dbcpDataSource.setUsername(dbProps.getProperty(AvailableSettings.USER));
		dbcpDataSource.setPassword(dbProps.getProperty(AvailableSettings.PASS));
		dbcpDataSource.setDriverClassName(dbProps.getProperty(AvailableSettings.DRIVER));
		dbcpDataSource.setMaxOpenPreparedStatements(50);
		dbcpDataSource.setTestOnBorrow(true);
		dbcpDataSource.setValidationQueryTimeout(900);

		dbProps.remove(AvailableSettings.URL);
		dbProps.remove(AvailableSettings.USER);
		dbProps.remove(AvailableSettings.PASS);
		dbProps.remove(AvailableSettings.DRIVER);

		initialize(database, dbProps, dbcpDataSource);
	}

	public static void initialize(String database, Map props, BasicDataSource dbcpDataSource) {
		Properties properties = new Properties();
		properties.putAll(props);
		DatabaseJPAConnector.connect(database, properties, dbcpDataSource);
	}

	public static void close(String database) {
		DatabaseJPAConnector.connect(database).close();
	}

}
